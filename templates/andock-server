#!/bin/bash

ANDOCK_VERSION=0.1.0

# @author Leonid Makarov
# Console colors
red='\033[0;91m'
red_bg='\033[101m'
green='\033[0;32m'
green_bg='\033[42m'
yellow='\033[1;33m'
NC='\033[0m'
CONFIG_DIR="$HOME/.docksal"

export DOCKSAL_VHOST_PROXY_IP="0.0.0.0"

#------------------------------ Help functions --------------------------------
# Ask dialog with an optional message
# @param $1 confirmation message
_ask ()
{
	# Skip checks if not running interactively (not a tty or not on Windows)
	read -p "$1 : " answer
	echo $answer
}

# Yes/no confirmation dialog with an optional message
# @param $1 confirmation message
# @author Leonid Makarov
_confirm ()
{
  # Skip checks if not running interactively (not a tty or not on Windows)
  while true; do
    read -p "$1 [y/n]: " answer
       case "$answer" in
       [Yy]|[Yy][Ee][Ss] )
       break
    ;;
    [Nn]|[Nn][Oo] )
   exit 1
;;
* )
echo 'Please answer yes or no.'
esac
done
}

# Nicely prints command help
# @param $1 command name
# @param $2 description
# @param $3 [optional] command color
# @author Oleksii Chekulaiev
printh ()
{
  local COMMAND_COLUMN_WIDTH=25;
  case "$3" in
  yellow)
    printf "  ${yellow}%-${COMMAND_COLUMN_WIDTH}s${NC}" "$1"
    echo -e "  $2"
  ;;
  green)
    printf "  ${green}%-${COMMAND_COLUMN_WIDTH}s${NC}" "$1"
    echo -e "  $2"
  ;;
  *)
    printf "  %-${COMMAND_COLUMN_WIDTH}s" "$1"
    echo -e "  $2"
  ;;
esac

}

# @author Leonid Makarov
# rewrite previous line
echo-rewrite ()
{
	echo -en "\033[1A"
	echo -e "\033[0K\r""$1"
}
# @author Leonid Makarov
echo-red () { echo -e "${red}$1${NC}"; }
echo-green () { echo -e "${green}$1${NC}"; }
echo-green-bg () { echo -e "${green_bg}$1${NC}"; }
echo-yellow () { echo -e "${yellow}$1${NC}"; }
echo-error () {
	echo -e "${red_bg} ERROR: ${NC} ${red}$1${NC}";
	local unused="$2$3" # avoid IDE warning
	shift
	# Echo other parameters indented. Can be used for error description or suggestions.
	while [[ "$1" != "" ]]; do
		echo -e "         $1";
		shift
	done
}



# Like if_failed but with more strict error
# @author Leonid Makarov
if_failed_error ()
{
  if [ ! $? -eq 0 ]; then
    echo-error "$@"
    exit 1
  fi
}

#------------------------------ HELP --------------------------------
show_help ()
{
  printh "andock Server command reference" "${ANDOCK_VERSION}" "green"

	echo
	printh "ssh-add" "Add public key to andock user authorized_key file"
  echo

	echo
	printh "version (v, -v)" "Print andock version. [v, -v] - prints short version"
	echo
    printh "self-update" "${yellow}Update andock${NC}" "yellow"
}

#------------------------------ SETUP --------------------------------

# Display fin version
# @option --short - Display only the version number
version ()
{
	if [[ $1 == '--short' ]]; then
		echo "$ANDOCK_VERSION"
	else
		echo "andock server (acs) version: $ANDOCK_VERSION"
	fi

}

_bridge ()
{

  local args=$@

  if [ "$1" = "env" ]; then
    export $2;
  fi
  if [ "${LC_ANDOCK_ENV}" != "" ]; then
    local service_name=$(fin @${LC_ANDOCK_ENV} ps | sed -n 's/\(.*\)_cli_1\(.*\)/\1/p')
    test -t 1 && USE_TTY="-t"
    docker exec  -i $USE_TTY "${service_name}_cli_1"  bash -c "$*"
  elif [ "$args" != "" ]; then
    eval "$args"
  else
    /bin/bash
  fi

}
#----------------------------------- MAIN -------------------------------------

case "$1" in
  _bridge)
    shift
    _bridge "$@"
  ;;

  -v | v)
    version --short
  ;;
    version)
	version
  ;;
	*)
		[ ! -f "$command_script" ] && \
			echo-yellow "Unknown command '$*'. See 'acs help' for list of available commands" && \
			exit 1
		shift
		exec "$command_script" "$@"
esac