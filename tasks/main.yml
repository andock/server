- name: Install packages
  retries: 3
  register: install_result
  until: install_result is succeeded
  package:
    name: "{{ item }}"
    state: present
  become: true
  loop:
    - sudo
    - git
    - curl
  tags:
    - install
    - update

- name: Install pip
  command: "bash -c 'curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py;python get-pip.py; rm get-pip.py'"
  tags:
    - install
  become: true

- name: Create docker group
  group:
    name: docker
    state: present
  become: true
  tags:
   - install

- name: Ensure group "docker" exists
  group:
    name: docker
    state: present
  tags:
    - install

- name: Ensure group "sudo" exists
  group:
    name: sudo
    state: present
  tags:
    - install

- name: "Create Andock user"
  user:
    name: "{{ andock_user }}"
    group: docker
    shell: /bin/bash
    generate_ssh_key: yes
    groups: "sudo"
    ssh_key_bits: 4096
    password: "{{ pw }}"
  become: true
  tags:
    - install
    - print_action

- name: "Register ANDOCK_HOME"
  command: "pwd"
  register: ANDOCK_HOME
  tags:
    - install
    - update
  become: true
  become_user: "{{ andock_user }}"
  args:
    chdir: "{{ andock_user_home }}"

- name: Install docker-py
  pip:
    name: docker-py
  become: true
  tags:
    - install
    - update
  retries: 3
  register: py_install_result
  until: py_install_result is succeeded

- name: Allow 'sudo' group to user andock (Disable password check)
  lineinfile:
    dest: /etc/sudoers
    state: present
    regexp: '^%sudo'
    line: '%sudo   ALL=(ALL:ALL) NOPASSWD: ALL'
  become: true
  tags:
    - install
    - update

- name: Add /usr/local/bin to secure_path
  lineinfile:
    dest: /etc/sudoers
    state: present
    regexp: '^Defaults    secure_path = /sbin:/bin:/usr/sbin:/usr/bin'
    line: 'Defaults    secure_path = /sbin:/bin:/usr/sbin:/usr/bin:/usr/local/bin'
  become: true
  tags:
    - install
    - update

- name: Ensures {{ andock_user_home }}/.docksal dir exists
  file:
    path: "{{ andock_user_home }}/.docksal"
    state: directory
    recurse: yes
  tags:
    - install
  become: true
  become_user: "{{ andock_user }}"

- name: "Generate docksal.env"
  template:
    src: "{{ docksal_env_template_path }}"
    dest: "{{ andock_user_home }}/.docksal/docksal.env"
    owner: "{{ andock_user }}"
    mode: "u=rw,g=rw,o=r"
  tags:
    - install
    - update
  become: true
  become_user: "{{ andock_user }}"

- name: "Ensure authorized_keys file exists"
  command: "touch ~/.ssh/authorized_keys"
  tags:
    - install
  become: true
  args:
    creates: "~/.ssh/authorized_keys"

- name: "Copy authorized_keys file"
  command: "bash -c '{{ item }}'"
  with_items:
    - "cp ~/.ssh/authorized_keys {{ ANDOCK_HOME.stdout_lines | join('\n') }}/.ssh/authorized_keys.tmp"
    - "cat {{ ANDOCK_HOME.stdout_lines | join('\n') }}/.ssh/id_rsa.pub >> {{ ANDOCK_HOME.stdout_lines | join('\n') }}/.ssh/authorized_keys.tmp"
    - "chown andock:docker {{ ANDOCK_HOME.stdout_lines | join('\n') }}/.ssh/authorized_keys.tmp"
    - "mv {{ ANDOCK_HOME.stdout_lines | join('\n') }}/.ssh/authorized_keys.tmp {{ ANDOCK_HOME.stdout_lines | join('\n') }}/.ssh/authorized_keys"
  tags:
    - install
  become: true
  args:
    creates: "{{ ANDOCK_HOME.stdout_lines | join('\n') }}/.ssh/authorized_keys"

- name: "Install Docksal"
  command: "bash -c 'curl -fsSL get.docksal.io | DOCKSAL_VERSION={{ docksal_version }} bash'"
  tags:
    - install
    - print_action
  become: true
  become_user: "{{ andock_user }}"
  args:
    creates: "/usr/local/bin/fin"

- name: "Update docksal"
  command: "fin update"
  tags:
    - update
    - print_action
  become: true
  become_user: "{{ andock_user }}"
  environment:
    - DOCKSAL_VERSION: "{{ docksal_version }}"

- name: "Register HOST_UID"
  command: "id -u"
  register: HOST_UID
  tags:
    - install
    - update
  become: true
  become_user: "{{ andock_user }}"

- name: "Register HOST_GID"
  command: "bash -c 'cut -d: -f3 < <(getent group docker)'"
  register: HOST_GID
  tags:
    - install
    - update
  become: true
  become_user: "{{ andock_user }}"

- name: "Install andockio/ssh2docksal"
  docker_container:
    image: "andockio/ssh2docksal:{{ ssh2docksal_version }}"
    state: started
    restart_policy: always
    name: "andock-ssh2docksal"
    detach: yes
    command: "{{ ssh2docksal_command }}"
    ports:
      - 0.0.0.0:2222:2222
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /usr/bin/docker:/usr/bin/docker
      - "{{ ANDOCK_HOME.stdout_lines | join('\n') }}/.ssh/authorized_keys:/home/docker/.ssh/authorized_keys:rw"
    env:
      HOST_UID: "{{ HOST_UID.stdout_lines | join('\n') }}"
      HOST_GID: "{{ HOST_GID.stdout_lines | join('\n') }}"
  tags:
    - update
    - install
    - print_action
  become: true
  become_user: "{{ andock_user }}"

- name: Enable sudo password
  lineinfile:
    dest: /etc/sudoers
    state: present
    regexp: '^%sudo'
    line: '%sudo   ALL=(ALL:ALL) NOPASSWD: /usr/sbin/adduser, /usr/sbin/userdel, /sbin/ip, /sbin/ifconfig, /usr/bin/tee'
  become: true
  tags:
    - install
    - update
  when: not sudo_nopasswd

- name: "Create Andock conf folder"
  file:
    state: directory
    path: "{{ andock_user_home }}/.andock"
  tags:
    - install
  become: true
  become_user: "{{ andock_user }}"

- name: "Copy version file"
  template:
    src: "templates/version"
    dest: "{{ andock_user_home }}/.andock/version"
    owner: "{{ andock_user }}"
    mode: "u=rw,g=rw,o=rw"
  become: true
  become_user: "{{ andock_user }}"
  tags: ['install', 'update']

- name: "Cat key"
  command: "cat {{ andock_user_home }}/.ssh/id_rsa.pub"
  register: ssh_key
  tags:
    - install
    - show_key
  become: true
  become_user: "{{ andock_user }}"

- name: "Please copy and paste the following SSH key to your git user if you can't use a deploy token."
  debug: msg="{{ ssh_key.stdout_lines | join('\n') }}"
  tags:
    - install
    - print_action
    - show_key
  become: true
  become_user: "{{ andock_user }}"